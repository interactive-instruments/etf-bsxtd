///////////////////////////////////////////////////////////////////////////////////////
//
// ETF-BsxTD
//
///////////////////////////////////////////////////////////////////////////////////////

buildscript {
	repositories {
		maven {
			url "http://services.interactive-instruments.de/etfdev-af/plugins-releases-local"
			credentials {
				username 'ii-bda'
				password '6ozhS683'
			}}
	}
	dependencies {
		classpath group: 'de.interactive_instruments.bda', name: 'etf-bda', version:'1.0.25'
	}
	dependencies {
		ant.unjar src: configurations.classpath.files.find {it.path.contains('etf')}, dest: 'build/gradle'
	}
}
apply from: 'build/gradle/ii-bda.gradle'

///////////////////////////////////////////////////////////////////////////////////////

group = 'de.interactive_instruments.etf.testdriver'
description = "ETF BaseX test driver"


ext.testDataDir = project.hasProperty('etf.td.deployment.dir') ?
		project.getProperty('etf.td.deployment.dir') :
		project.file('./build/tmp/td')



repositories {
	maven {
		url "http://files.basex.org/maven"
	}
	maven {
		url "https://services.interactive-instruments.de/etfdev-af/ext-deegree-cache"
		credentials {
			username gradle.rootProject.ext.r_user
			password gradle.rootProject.ext.r_pwd
		}
	}
}

ext.basexVersion = '8.5.5-ii'
ext.deegreeVersion = '3.3.20'
ext.gmlGeoXVersion = '1.2.0'

configurations {
	compile.exclude group:'xalan'
    runtime.exclude group: "org.slf4j", module: "slf4j-nop"
    bsxPlugins
}

dependencies {

	compileOnly group: 'de.interactive_instruments', name: 'ii-commons-util', version:'2.0.0'+project.snapshotSuffix
	compileOnly group: 'de.interactive_instruments.etf', name: 'etf-core', version:'1.0.0'+project.snapshotSuffix
	compileOnly group: 'de.interactive_instruments.etf', name: 'etf-spi', version:'1.0.0'+project.snapshotSuffix
    bsxPlugins group: 'de.interactive_instruments.etf.bsxm', name: 'etf-gmlgeox', version: "$gmlGeoXVersion"+project.snapshotSuffix

	compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'

	compile group: 'commons-io', name: 'commons-io', version: etf_commonsIoVersion

	// BaseX
	compile group: 'org.basex', name: 'basex', version: basexVersion

	compileOnly group: 'net.sf.saxon', name: 'Saxon-HE', version: etf_saxonHe

	compileOnly group: 'org.slf4j', name: 'slf4j-api', version: etf_slf4jApiVersion


	// Degree core for geometry validation
	compile("org.deegree:deegree-core-base:$deegreeVersion") {
		exclude group: 'org.slf4j'
		exclude group: 'xerces'
		exclude group: 'xml-apis'
		exclude group: 'com.h2database'
		exclude group: 'org.postgis'
		exclude group: 'postgresql'
		exclude group: 'commons-logging'
	}

	// Required by BaseX extensions, must be placed in the lib folder or
	// the extension class loader will not initialize 3rd party libraries correctly
	compileOnly group: 'xerces', name: 'xercesImpl', version: etf_xercesVersion
	compileOnly group: 'xml-apis', name: 'xml-apis', version: etf_xmlApisVersion
	compileOnly('dom4j:dom4j:1.6.1') {
		exclude group: 'xml-apis'
	}

	testCompile group: 'junit', name: 'junit', version: etf_junitTestVersion
}

def allLibs = configurations.runtime + configurations.compile -
		configurations.compile.filter { it.name.startsWith('etf-core') } -
		configurations.compile.filter { it.name.startsWith('etf-spi') } -
		configurations.compile.filter { it.name.startsWith('ii-commons-util') } -
		configurations.compile.filter { it.name.startsWith('slf4j-api') } -
		configurations.compile.filter { it.name.startsWith('log4j') && !it.name.startsWith('log4j-over-slf4j') } -
		configurations.compile.filter { it.name.startsWith('jetty') } -
		configurations.compile.filter { it.name.startsWith('xml-apis') } -
		configurations.compile.filter { it.name.startsWith('commons-lang3') } -
		configurations.compile.filter { it.name.startsWith('xercesImpl') }

jar.doFirst {
	manifest {
		attributes(
				'Test-Engine-Title': 'BaseX',
				'Test-Engine-Vendor': 'BaseX GmbH',
				'Test-Engine-Version': basexVersion
		)
	}
}

jar {
	into('lib') {
		from allLibs
	}
}

jar {
    into('plugins') {
        from configurations.bsxPlugins.copy().setTransitive(false)
        rename { String fileName ->
            fileName.replaceAll('-(\\d+)\\.(\\d+)\\.(\\d+)(-SNAPSHOT)?', "")
        }
    }
}

task copyTdToTdDir(dependsOn: jar) {
    doLast {
        copy {
            from jar
            into "$testDataDir"
        }
        println "Copied test driver to $testDataDir"
    }
}

install {
	dependsOn = ["copyTdToTdDir"]
}

// INTEGRATION TESTS
///////////////////////////////////////////////////////////////////////////////////////

// TODO

///////////////////////////////////////////////////////////////////////////////////////
